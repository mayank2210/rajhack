

import com.sun.speech.freetts.Voice;
import com.sun.speech.freetts.VoiceManager;
import edu.cmu.sphinx.api.Configuration;
import edu.cmu.sphinx.api.LiveSpeechRecognizer;
import edu.cmu.sphinx.api.SpeechResult;
import java.io.BufferedInputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javazoom.jl.player.Player;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Admin
 */
public class Audio_Player extends javax.swing.JFrame {

    /**
     * Creates new form Audio_Player
     */
    static Configuration configuration;
    static LiveSpeechRecognizer recognize;
    public Audio_Player() throws IOException {
        initComponents();
        configuration = new Configuration();
        configuration.setAcousticModelPath("resource:/edu/cmu/sphinx/models/en-us/en-us");
         configuration.setDictionaryPath("2248.dic");
         configuration.setLanguageModelPath("2248.lm");
         recognize= new LiveSpeechRecognizer(configuration);
    }

     public static final String VOICENAME="kevin16";  
        
        public static int check() throws IOException{

         
         
         
         recognize.startRecognition(true);
         int x=0;
         SpeechResult result;
         while ((result=recognize.getResult()) != null) {            
            String command=result.getHypothesis();
            
            
             if (command.equalsIgnoreCase("A")) {
                 x=1;
                 recognize.stopRecognition();
                break;
              //   ProcessBuilder pb = new ProcessBuilder("Notepad.exe", "myfile.txt");
                // pb.start();
             }else if (command.equalsIgnoreCase("B")) {
                 x=2;
                 recognize.stopRecognition();
                 break;
                
             }
             
             
            
        }
         return x;
        }
    
        public static void start() throws FileNotFoundException, IOException{
        String go="",pl="";
        int count=0;
        Voice voice;
        VoiceManager vm= VoiceManager.getInstance();
        voice= vm.getVoice(VOICENAME);
        
        voice.allocate();
        FileReader reader=new FileReader("letsgo.txt");
        int character;
 
            while ((character = reader.read()) != -1) {
                go=go+(char) character;
            }
            reader.close();
        int i=0;
        for (int j = 0; j < go.length(); j++) {
            if(go.charAt(j)=='.'){
                count++;
            }
        }
        for (int j = 0; j < count; j++) {
            
        
            for (; i < go.length(); i++) {

                pl=pl+go.charAt(i);
                if(go.charAt(i)=='.'){
                    i++;
                    break;
                }
            }
            
            try {
                voice.speak(pl);
                Thread.sleep(500);
            } catch (Exception e) {
            }
            pl="";
        }
        
        
    }
    
        
    public static class Mp3Player {
    
    private String filename;
    private Player player; 
    
    
 
        public Mp3Player(String filename) { 
            this.filename = filename;
        }
        
        
        
        
        public void play() {
        try {   
            BufferedInputStream buffer = new BufferedInputStream(
            new FileInputStream(filename));
            player = new Player(buffer);
            player.play();
        }
        catch (Exception e) {
 
         System.out.println(e);
        }
 
    }
    
}
    
    public static void one() throws IOException{
        Voice voice;
                VoiceManager vm= VoiceManager.getInstance();
                voice= vm.getVoice(VOICENAME);
        
                voice.allocate();
        String[] cool=new String[]{"Beep.mp3","Hornblow.mp3","Naah.mp3","Soch.mp3","Yaar.mp3"};
        for (int i = 0; i < 10; i++) {
            NewClass3.Mp3Player mp= new NewClass3.Mp3Player(cool[i]);
            mp.play();
            start();
            int m=check();
            if(m==2){
                
                
                break;
            }
        }
        voice.speak("THANK YOU");
       
        
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 522, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(50, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(44, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        try {
            one();
        } catch (IOException ex) {
            Logger.getLogger(Audio_Player.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formWindowOpened

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Audio_Player.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Audio_Player.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Audio_Player.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Audio_Player.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Audio_Player().setVisible(true);
                    
                } catch (IOException ex) {
                    Logger.getLogger(Audio_Player.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
